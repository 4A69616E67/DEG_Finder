scale_fill_manual(labels=paste(enzyme, draw_labels, sep = ""),values = as.character(EnzymeColor[EnzymeColor$Enzyme %in% gsub(".*ABE","",draw_labels),]$Color))
print(plot)
}
#------------------------------------画Indel------------------------------------
plot=drawIndel(Targets,DrawSample)
draw_labels=levels(plot$data$Sample)[levels(plot$data$Sample) %in% plot$data$Sample]#当绘图的labels少于给定的labels时需要使用此代码
plot=plot+
scale_fill_manual(labels=paste(enzyme,draw_labels,sep = ""),values = as.character(EnzymeColor[EnzymeColor$Enzyme %in% gsub(".*ABE","",draw_labels),]$Color))+
ggtitle("Indel")+
xlab(label = NULL)+ylab("Percentage of total sequencing reads with Indel")
print(plot)
#------------------------------------画合并结果-----------------------------
# plot=drawMerged(Targets,DrawSample,merged_list[[enzyme]])+
#   ggtitle(enzyme)+
#   ylab("Percentage of total sequencing reads with A•T to G•C")+
#   scale_fill_manual(labels=paste(enzyme, DrawSample, sep = ""),values = as.character(EnzymeColor[EnzymeColor$Enzyme %in% gsub(".*ABE","",DrawSample),]$Color))
# print(plot)
dev.off()
gene_id_trans_table<-read.table("f:/Project/Xenopus/gene_id_trans_table.txt")
gene_id_trans_table<-read.table("f:/Project/Xenopus/gene_id_trans_table.txt",sep = "\t")
View(gene_id_trans_table)
gene_id_trans_table<-read.table("f:/Project/Xenopus/gene_id_trans_table.txt",sep = "\t",header = T)
View(gene_id_trans_table)
gene_id_trans_table<-read.table("f:/Project/Xenopus/gene_id_trans_table.txt",sep = "\t",header = T,quote = "")
View(gene_id_trans_table)
lintr::line_length_linter(160)
lintr::line_length_linter()
lintr::line_length_linter(length = 160)
lintr::line_length_linter(length = 160)
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
remove.packages("languageserver")
install.packages("languageserversetup")
install.packages("languageserver")
BiocManager::install("languageserver")
languageserversetup::languageserver_install()
languageserversetup::languageserver_install()
install.packages("C:/Users/snowf/Desktop/languageserver_0.3.12.tar.gz", repos = NULL, type = "source")
setwd("F:/Project/SZY/hybridize/RNA/scripts")
setwd("F:/Project/R/DEG_Finder")
#------------------测试用参数设置-----------
opt=list()
opt$input="f:/Project/SZY/hybridize/RNA/result/Hybridize_featureCount.matrix"
opt$Control="P53sP53e-S9,XLWT-S9,XTWT-hpf7"
opt$group="f:/Project/SZY/hybridize/RNA/scripts/sample.info.txt"
opt$TPM=F
opt$GenesLen="f:/Project/Xenopus/XENTR_10.0_geneLen.txt"
opt$output="f:/Project/SZY/hybridize/RNA/scripts/test"
opt$Specise="xtr"
opt$Treat="LsP53e-S9,XLXT-S9,TeLs-hpf7"
opt$GO=T
#factor的存储方式为，所有非重复的值存在level中，而factor中存的是level的索引。所以factor直接转character时可能会转换成对应的索引值，而不是字符串
RawData <- read.table(file = InFile, header = F, sep = "\t",colClasses = "character") #默认情况下每一列都会是factor，这里不用factor
##---------------------------
InFile<-opt$input
#factor的存储方式为，所有非重复的值存在level中，而factor中存的是level的索引。所以factor直接转character时可能会转换成对应的索引值，而不是字符串
RawData <- read.table(file = InFile, header = F, sep = "\t",colClasses = "character") #默认情况下每一列都会是factor，这里不用factor
View(RawData)
names(RawData)<-RawData[1,] #不直接读header，防止R改名
RawData<-RawData[-1,]
View(RawData)
######################
colcount <- dim(RawData)[2]
gene_merge_table <- read.table("f:/Project/Xenopus/XenbaseGenepageToGeneIdMapping_chd.txt",header = F,skip = 1,sep = "\t")
gene_id_trans_table <- read.table("f:/Project/Xenopus/XenbaseGeneHumanOrthologMapping_chd.txt",skip = 1, header = F,sep = "\t",quote = "")
View(gene_id_trans_table)
names(gene_id_trans_table)<-c("Human_Entrez_ID","XB_GENEPAGE_ID","XB_GENEPAGE_NAME","GENE_Desc")
#######################合并基因##################
gene_name_trans_table<-read.table(file = "f:/Project/Xenopus/gene_id_trans_table.txt",sep = "\t",quote = "",header = T)
new_gene_name<-as.character(gene_name_trans_table$XB_GENEPAGE_NAME[match(rownames(CountData),gene_name_trans_table$XB_GENE_NAME)])
CountData=RawData
View(gene_name_trans_table)
new_gene_name<-as.character(gene_name_trans_table$XB_GENEPAGE_NAME[match(rownames(CountData),gene_name_trans_table$XB_GENE_NAME)])
# new_gene_name[is.na(new_gene_name)]<-rownames(CountData)[is.na(new_gene_name)]
# CountData$gene <- new_gene_name
CountData<-CountData[!is.na(new_gene_name),]
View(CountData)
CountData=RawData
rownames(CountData)
View(CountData)
View(RawData)
View(opt)
######################
Group<-NULL
#判断condition文件是否存在
if(!is.null(opt$group)){
fit<-try({Group<-read.table(file = opt$group,header = T)})#使用try方法，即使读取错误也无妨
}
View(Group)
Pre<-PreProcess(data = RawData,group = Group) #数据预处理
PreProcess <- function(data,group){
#-------------将featurecount的结果转换成需要的格式-----------
GeneName<-data[[1]] #先储存基因名
GeneLength<-NULL #储存基因长度（所有不重合的外显子长度之和）
if(names(data)[2]=="Chr" && names(data)[6]=="Length"){
GeneLength<-data.frame(Gene=GeneName,Length=data[["Length"]])
row.names(GeneLength)<-GeneName #行名替换成基因名
data<-data[,-(2:6)]
}
data<-data[,-1]
ColName<-names(data) #先将列名储存
data<-as.data.frame(lapply(data, as.numeric)) #转换成数值，列名可能会变动
names(data)<-ColName #再将列名赋值回去
row.names(data)<-GeneName #转换成数值后重新赋值一遍行名
#------------------输入格式转换完成---------------------------
#------------------添加分组---------------
#分组至少有两列，分别是sample和condition
#先初始化分组信息
#判断是否为空
if(!is.null(group)){
if(dim(group)[1]<=0 || (!"sample" %in% names(group))){
cat("can not find corrected group content, use file header as sample name\n")
group<- data.frame(sample=colnames(data),condition=gsub(x = colnames(data), pattern = "_[^_]*$", replacement = "", perl = T))
}
#若无condition，则依据sample值设置
if (!"condition" %in% names(group)) {
cat("set condition depend on sample name\n")
group<-data.frame(group,condition=gsub(x = group[["sample"]], pattern = "_[^_]*$", replacement = "", perl = T))
}
}else{
#如果group为空则使用输入数据的header作为sample
cat("Empty group, use file header as sample name\n")
group<- data.frame(sample=colnames(data),condition=gsub(x = colnames(data), pattern = "_[^_]*$", replacement = "", perl = T))
}
#判断sample名是否一致
if (!all(group[["sample"]] %in% names(data))) {
#不一致，退出
cat("sample name include unkonow contnet\n")
quit(status = 1)
}
data<-data[,match(Group$sample,names(data))] #只保留sample中含有的样本,which返回的时前一个数组的索引值
row.names(group)<-as.character(group$sample)
if("name" %in% names(group)){
#如果有name词条，则将样本名改成name
names(data)<-as.character(group$name)
row.names(group)<-as.character(group$name)
}
data <- data[which(rowSums(data) > dim(data)[2]), ] #去除全为0的行
cat("Sample name:\t",as.character(group[["sample"]]),"\n")
cat("Group name:\t",as.character(group[["condition"]]),"\n")
res<-list(data=data,group=group,gene_length=GeneLength)
return(res)
}
#===============================================================================================================================================================
#=================================计算TPM=======================================
CalculateTPM <- function(data,geneLen){
OverlapGene<-intersect(rownames(data),rownames(geneLen)) #计算重叠的基因
if (length(OverlapGene) < dim(data)[1]) {
#若不能得到全部的基因长度，输出警告信息
warning("Can not get all gene's length!")
warning(dim(data)[1]-length(OverlapGene)," genes will be remove!")
}
#只保留有基因长度的基因
data<-data[OverlapGene,]
geneLen<-geneLen[OverlapGene,]
cat("remove gene length bias\n")
TPM_data<-data
RPK_sum<-list()
#计算TPM
for(j in names(TPM_data)){
TPM_data[[j]]<-TPM_data[[j]]/as.numeric(geneLen[row.names(TPM_data),2])*3000 #除以基因长度
#对数据量标准化
#RPK_sum[[j]]<-sum(TPM_data[[j]])
#TPM_data[[j]]<-TPM_data[[j]]/RPK_sum[[j]]*1000000
}
data<-ceiling(TPM_data) #转换为整数
return(data)
}
Pre<-PreProcess(data = RawData,group = Group) #数据预处理
Group<-Pre$group
GeneLen<-Pre$gene_length
CountData<-Pre$data
SignIndicator <- "pvalue"
#######################合并基因##################
gene_name_trans_table<-read.table(file = "f:/Project/Xenopus/gene_id_trans_table.txt",sep = "\t",quote = "",header = T)
new_gene_name<-as.character(gene_name_trans_table$XB_GENEPAGE_NAME[match(rownames(CountData),gene_name_trans_table$XB_GENE_NAME)])
# new_gene_name[is.na(new_gene_name)]<-rownames(CountData)[is.na(new_gene_name)]
# CountData$gene <- new_gene_name
CountData<-CountData[!is.na(new_gene_name),]
PreProcess <- function(data,group){
#-------------将featurecount的结果转换成需要的格式-----------
GeneName<-data[[1]] #先储存基因名
GeneLength<-NULL #储存基因长度（所有不重合的外显子长度之和）
if(names(data)[2]=="Chr" && names(data)[6]=="Length"){
GeneLength<-data.frame(Gene=GeneName,Length=data[["Length"]])
row.names(GeneLength)<-GeneName #行名替换成基因名
data<-data[,-(2:6)]
}
data<-data[,-1]
ColName<-names(data) #先将列名储存
data<-as.data.frame(lapply(data, as.numeric)) #转换成数值，列名可能会变动
names(data)<-ColName #再将列名赋值回去
row.names(data)<-GeneName #转换成数值后重新赋值一遍行名
#------------------输入格式转换完成---------------------------
#------------------添加分组---------------
#分组至少有两列，分别是sample和condition
#先初始化分组信息
#判断是否为空
if(!is.null(group)){
if(dim(group)[1]<=0 || (!"sample" %in% names(group))){
cat("can not find corrected group content, use file header as sample name\n")
group<- data.frame(sample=colnames(data),condition=gsub(x = colnames(data), pattern = "_[^_]*$", replacement = "", perl = T))
}
#若无condition，则依据sample值设置
if (!"condition" %in% names(group)) {
cat("set condition depend on sample name\n")
group<-data.frame(group,condition=gsub(x = group[["sample"]], pattern = "_[^_]*$", replacement = "", perl = T))
}
}else{
#如果group为空则使用输入数据的header作为sample
cat("Empty group, use file header as sample name\n")
group<- data.frame(sample=colnames(data),condition=gsub(x = colnames(data), pattern = "_[^_]*$", replacement = "", perl = T))
}
#判断sample名是否一致
if (!all(group[["sample"]] %in% names(data))) {
#不一致，退出
cat("sample name include unkonow contnet\n")
quit(status = 1)
}
data<-data[,match(Group$sample,names(data))] #只保留sample中含有的样本,which返回的时前一个数组的索引值
row.names(group)<-as.character(group$sample)
if("name" %in% names(group)){
#如果有name词条，则将样本名改成name
names(data)<-as.character(group$name)
row.names(group)<-as.character(group$name)
}
#data <- data[which(rowSums(data) > dim(data)[2]), ] #去除全为0的行
cat("Sample name:\t",as.character(group[["sample"]]),"\n")
cat("Group name:\t",as.character(group[["condition"]]),"\n")
res<-list(data=data,group=group,gene_length=GeneLength)
return(res)
}
Pre<-PreProcess(data = RawData,group = Group) #数据预处理
Group<-Pre$group
GeneLen<-Pre$gene_length
CountData<-Pre$data
SignIndicator <- "pvalue"
new_gene_name<-as.character(gene_name_trans_table$XB_GENEPAGE_NAME[match(rownames(CountData),gene_name_trans_table$XB_GENE_NAME)])
# new_gene_name[is.na(new_gene_name)]<-rownames(CountData)[is.na(new_gene_name)]
# CountData$gene <- new_gene_name
CountData<-CountData[!is.na(new_gene_name),]
CountData<-aggregate(CountData,by=list("gene"=new_gene_name[!is.na(new_gene_name)]),FUN=sum)
rownames(CountData)<-CountData$gene
CountData<-CountData[,-1]
View(CountData)
write.table(CountData,file = "f:/Project/SZY/hybridize/RNA/result/Hybridize.count.merge.matrix",quote = F,sep = "\t")
library("getopt", quietly = TRUE, warn.conflicts = F)
# library("plotly", quietly = TRUE, warn.conflicts = F)
library("tidyr", quietly = TRUE, warn.conflicts = F)
source("Utils.R")
##==========================================================================================================================================================
parameter <- matrix(c(
"Input", "i", 1, "character", "<file> \t input file, gene experiment count matrix",
"OutDir", "o", 2, "character", "<dir> \t output dir (default ./)",
"Prefix", "p", 2, "character", "<string> \t output prefix",
"Control", "C", 1, "character", "<string> \t control name (must exist in group name)",
"Treat", "T", 2, "character", "<string> \t treat names (defalut all group names exclude control name)",
"Condition", "g", 2, "character", "<file> \t group setting (include header and sample names must same as input file header)",
"Species", "s", 2, "character", "<string> \t species database, used to process GO rich and KEGG rich (\"xtr\" or \"xla \" or hsa \")\"",
"GO", "G", 0, "logical", "\t\t execute GO term",
"KEGG", "K", 0, "logical", "\t\t execute KEGG term",
"Genes", "E", 2, "character", "<file> \t related gene list",
"Config", "c", 2, "character", "<file> \t configure file"
),
byrow = T, ncol = 5
)
##默认参数
default_value <- list(Input=NULL, OutDir="./", Prefix="DES_OUT", Control=NULL, Treat=NULL, Condition=NULL, GeneLens=NULL, Species="xtr", GO=F, KEGG=F, TPM=F, MaxP=0.01, MinLog2FC=1) #默认参数值
##测试参数
default_value <- list(Input="f:/Project/SZY/hybridize/RNA/result/Hybridize.count.merge.matrix",
OutDir="f:/Project/SZY/hybridize/RNA/result/DES/",
Prefix="DES_2022_02_27",
Control="XTWT-S11,XTWT-S11,XTWT-S25",
Treat="TELS-S11,TelsDp53-S11,TelsDp53-S25",
Condition="f:/Project/SZY/hybridize/RNA/scripts/sample.info.txt",
GeneLens="f:/Project/Xenopus/Xenopus.gene.len.txt",
Species="xtr", ## xtr xla hsa dre
GO=T, KEGG=T, TPM=T, MaxP=0.01, MinLog2FC=1) #测试参数
## options----------------------------------------------------------------------------------------------------------------------------------------------------
# 从命令行接收参数
opt <- getopt(spec = parameter)
# opt$Config <- "f:/Project/SZY/hybridize/RNA/scripts/config.txt"
###读取配置文件的信息
if(!is.null(opt$Config)){
if (file.exists(opt$Config)) {
opt <- get_configure(opt,config_file = opt$Config)
}else{
warning("Incorrect configure file: ", opt$Config)
}
}
#########参数初始化
opt <- opt_init(opt, default_value)
options(nwarnings = 1000)
##############若必须参数的值为空，则打印帮助信息
if (is.null(opt$Input) || is.null(opt$Control)) {
cat(getopt(spec = parameter, usage = T))
stop()
}
show_opt(opt)
## ---------------------------
library("DESeq2", quietly = TRUE, warn.conflicts = F)
library("ggplot2", quietly = TRUE, warn.conflicts = F)
library("pheatmap", quietly = TRUE, warn.conflicts = F)
library("openxlsx", quietly = TRUE, warn.conflicts = F)
## ---------------------------
InFile <- opt$Input
OutPrefix <- opt$Prefix #输出前缀
OutDir <- opt$OutDir #输出目录
Species <- opt$Species  #物种名 xtr xla hsa
max_pvalue <- opt$MaxP # 最大p值
min_log2_fold_change <- opt$MinLog2FC # 最小倍数差异
SignIndicator <- "pvalue" #使用p值做差异分析
html_lib_dir <- paste(OutDir,"/html/lib",sep = "")
# factor的存储方式为，所有非重复的值存在level中，而factor中存的是level的索引。所以factor直接转character时可能会转换成对应的索引值，而不是字符串
RawData <- read.table(file = InFile, header = F, sep = "\t", colClasses = "character") # 默认情况下每一列都会是factor，这里不用factor
# factor的存储方式为，所有非重复的值存在level中，而factor中存的是level的索引。所以factor直接转character时可能会转换成对应的索引值，而不是字符串
RawData <- read.table(file = InFile, header = F, sep = "\t", colClasses = "character") # 默认情况下每一列都会是factor，这里不用factor
names(RawData) <- RawData[1, ] # 不直接读header，防止R改名
RawData <- RawData[-1, ] #去掉第一行
Condition <- NULL
# 判断condition文件是否存在
if (!is.null(opt$Condition)) {
fit <- try({Condition <- read.table(file = opt$Condition, header = T)}) # 使用try方法，即使读取错误也无妨
}
Pre <- PreProcess(data = RawData, condition = Condition) # 数据预处理
View(Condition)
# 判断condition文件是否存在
if (!is.null(opt$Condition)) {
fit <- try({Condition <- read.table(file = opt$Condition, header = T)}) # 使用try方法，即使读取错误也无妨
}
View(Condition)
Pre <- PreProcess(data = RawData, condition = Condition) # 数据预处理
Condition <- Pre$condition
GeneLen <- Pre$gene_length
CountData <- Pre$data
gene_names <- rownames(CountData) #提取基因名
#-------------------判断是否使用TPM值---------------------------------------------------------------------------------------------------------------------------
# 读取基因长度
if (!is.null(opt$GeneLens) && file.exists(opt$GeneLens)) {
GeneLen <- read.table(opt$GeneLens, header = F, sep = "\t")
row.names(GeneLen) <- GeneLen[[1]]
names(GeneLen) <- c("Gene", "Length")
}
TPMData=NULL
if (opt$TPM && !is.null(GeneLen)) {
TPMData <- CalculateTPM(data = CountData, geneLen = GeneLen)
#########判断是否进行趋势分析
trand_res <- trendAnalyse(data = CountData, condition = Condition)
}
####读取相关基因名
if(!is.null(opt$Include) && file.exists(opt$Include)){
relate_genes <- read.table(opt$Include,header = F)[[1]]
}else{
relate_genes <- gene_names #默认相关基因为全部基因
}
relate_index <- na.omit(match(relate_genes,gene_names)) ##获取相关基因的索引值
#---------------------------------------------------------------------------------------------------------------------------------------------------------------
pdf(paste(OutDir, "/", OutPrefix, ".plot.pdf", sep = ""), height = 10, width = 16) # 暂时注释
#绘制TPM分布
if(!is.null(TPMData)){
ggplot(gather(TPMData, key = sample, value = exp),aes(y = log2(exp), x = sample)) + geom_violin(trim = T) + geom_boxplot(width=0.1)
}
pheatmap(cor(CountData,method = "pearson"), display_numbers = F, show_colnames = F,clustering_method = "single")
dds <- DESeqDataSetFromMatrix(CountData, colData = Condition, design = ~group) # 由于data的列必须与group的行相同，所以得去掉group中没有的样本
dds <- DESeq(dds)
write.table(assay(normTransform(dds)), file = paste(OutDir, "/", OutPrefix, ".nor.tsv", sep = ""), quote = F, sep = "\t") # 打印标准化后的序列
# PCA分析
pcaData <- plotPCA(vst(dds, blind = F), intgroup = "group") + theme_bw()
pcaData
write.table(pcaData$data, file = paste(OutDir, "/", OutPrefix, ".pca.tsv", sep = ""), quote = F, sep = "\t", row.names = F) # 打印PCA的结果
# 识别或加载对照组和处理组的名字
Control <- strsplit(x = opt$Control, split = ",", fixed = T)[[1]]
TreatList <- levels(Condition$group)
if (!is.null(opt$Treat)) {
TreatList <- strsplit(x = opt$Treat, split = ",", fixed = T)[[1]]
}
#########################
#------------------------------------------------------------加载数据库-----------------------------------------------------------------------------------------
# 判断物种并加载数据库
data_base <- NULL
library("AnnotationHub", quietly = T, warn.conflicts = F)
gene_id_trans_table <- read.table("f:/Project/Xenopus/gene_id_trans_table_three_species.txt", sep = "\t", header = T, quote = "")
if (Species == "xla") {
data_base <- AnnotationDbi::loadDb("Xenopus_laevis.db")
# data_base<-AnnotationHub()[["AH75748"]]
entrez_id <- mapIds(x = data_base, keys = rownames(CountData), keytype = "SYMBOL", column = "ENTREZID")
} else if (Species == "xtr") {
data_base <- AnnotationDbi::loadDb("Xenopus_tropicalis.db")
# data_base<-AnnotationHub()[["AH76241"]]
entrez_id <- mapIds(x = data_base, keys = rownames(CountData), keytype = "SYMBOL", column = "ENTREZID")
} else if (Species == "hsa") {
library(org.Hs.eg.db)
data_base <- org.Hs.eg.db
# entrez_id <- mapIds(x = data_base, keys = rownames(CountData), keytype = "SYMBOL", column = "ENTREZID") #不成功
entrez_id <- as.character(gene_id_trans_table$Human_Entrez_ID[match(rownames(CountData), gene_id_trans_table$XB_GENEPAGE_NAME)]) ## 转换成人的Entrez id
} else if(Species == "dre"){
library(org.Dr.eg.db)
data_base <- org.Dr.eg.db
entrez_id <- as.character(gene_id_trans_table$Zebrafish_Entrez_ID[match(rownames(CountData), gene_id_trans_table$XB_GENEPAGE_NAME)]) ## 转换成斑马鱼的Entrez id
}else{
Species=NULL
}
# 加载GO和KEGG分析需要的包
if (!is.null(opt$GO) || !is.null(opt$KEGG)) {
library("clusterProfiler", quietly = T, warn.conflicts = F)
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------
foldChangeList <- data.frame(row.names = rownames(assay(dds)), gene = rownames(assay(dds)))
res_xlsx_list <- list()
Changed_gene_list <- list()
go_term_list <- list()
# 输出配置信息
# cat("Max p value: ", max_pvalue, "\n")
# cat("Min log2FoldChange: ", min_log2_fold_change, "\n")
cat("Diff expression genes analysis start")
#-------------------------进行差异分析----------------------------------------
for (i in 1:length(TreatList)) {
aSample <- as.character(TreatList[i])
aControl <- as.character(Control[(i - 1) %% length(Control) + 1])
title_name <- paste(sep = "_vs_", aSample, aControl)
if (aSample == aControl) {
next
}
cat("process DESeq2:\t", aSample, "\t", aControl, "\n")
res <- results(dds, contrast = c("group", aSample, aControl)) # 获取差异表达结果
res_dataframe <- cbind(data.frame(genes = rownames(res)), as.data.frame(res), significant = res$log2FoldChange)
res_dataframe$significant <- factor("normal", levels = c("up", "normal", "down")) # 添加是否是差异基因
gene_index <- intersect(which(res[[SignIndicator]] < max_pvalue & abs(res$log2FoldChange) > min_log2_fold_change), relate_index)
up_gene_index <- intersect(which(res[[SignIndicator]] < max_pvalue & res$log2FoldChange > min_log2_fold_change), relate_index)
down_gene_index <- intersect(which(res[[SignIndicator]] < max_pvalue & res$log2FoldChange < -min_log2_fold_change), relate_index)
res_dataframe$significant[up_gene_index] <- "up"
res_dataframe$significant[down_gene_index] <- "down"
fig <- ggplot(data = res_dataframe) + theme_classic() + geom_point(mapping = aes(x = log2(baseMean), y = log2FoldChange, colour = significant, text= genes),size=1) +
ggtitle(title_name) + theme(plot.title = element_text(hjust = 0.5), plot.margin = unit(rep(2,4),'lines')) # 绘制MA图
print(fig)
# fig <- ggplotly(fig, dynamicTicks=T)
# htmlwidgets::saveWidget(as_widget(fig),file =  paste(OutDir, "/html/", OutPrefix, ".", title_name, ".MA.html", sep = ""),libdir = html_lib_dir)
fig <- ggplot(data = res_dataframe) + theme_classic() + geom_point(mapping = aes(x = log2FoldChange, y = -log10(pvalue), colour = significant, text=genes),size=1) +
geom_hline(yintercept = -log10(max_pvalue), linetype= "dashed") + geom_vline(xintercept = c(-min_log2_fold_change,min_log2_fold_change), linetype= "dashed") +
ggtitle(title_name) + theme(plot.title = element_text(hjust = 0.5), plot.margin = unit(rep(2,4),'lines')) # 绘制火山图
print(fig)
# fig <- ggplotly(fig, dynamicTicks=T)
# htmlwidgets::saveWidget(as_widget(fig),file =  paste(OutDir, "/html/", OutPrefix, ".", title_name, ".volcano.html", sep = ""),libdir = html_lib_dir)
res_xlsx_list[[paste(aSample, aControl, sep = "-")]] <- res_dataframe
Changed_gene_list[[title_name]] <- data.frame(gene = c(rownames(res)[up_gene_index], rownames(res)[down_gene_index]), count = c(rep(1, length(up_gene_index)), rep(-1, length(down_gene_index))))
names(Changed_gene_list[[title_name]]) <- c("gene", title_name)
if (length(gene_index) > 0) {
# 有差异表达基因才输出
pheatmap(assay(normTransform(dds))[gene_index, which(Condition$group %in% c(aSample, aControl))], cluster_rows = T, show_rownames = F, cluster_cols = T, annotation_col = Condition, fontsize = 6, main = paste(sep = "-", aSample, aControl))
if (!is.null(data_base) && !is.null(opt$GO) && opt$GO) {
cat("process GO enrich:\t", aSample, "\t")
#################diff gene GO###################
go_result <- process.go(entrez_id = (na.omit(entrez_id[gene_index])), data_base = data_base, pvalue = 0.05, qvalue = 0.05, universe = (na.omit(entrez_id)))
go_term_list[[paste(title_name,"_Diff",sep = "")]] <- go_result$ALL
if (!is.null(go_result$ALL) && dim(go_result$ALL@result)[1] > 0) {
print(dotplot(go_result$ALL, title = paste(aSample, " vs ", aControl, " Diff genes\tGO term", sep = ""), showCategory = 30))
}
################up gene GO####################
go_result <- process.go(entrez_id = (na.omit(entrez_id[up_gene_index])), data_base = data_base, pvalue = 0.05, qvalue = 0.05, universe = (na.omit(entrez_id)))
go_term_list[[paste(title_name,"_Up",sep = "")]] <- go_result$ALL
if (!is.null(go_result$ALL) && dim(go_result$ALL@result)[1] > 0) {
print(dotplot(go_result$ALL, title = paste(aSample, " vs ", aControl, " Up genes\tGO term", sep = ""), showCategory = 30))
}
###############down gen GO###################
go_result <- process.go(entrez_id = (na.omit(entrez_id[down_gene_index])), data_base = data_base, pvalue = 0.05, qvalue = 0.05, universe = (na.omit(entrez_id)))
go_term_list[[paste(title_name,"_Down",sep = "")]] <- go_result$ALL
if (!is.null(go_result$ALL) && dim(go_result$ALL@result)[1] > 0) {
print(dotplot(go_result$ALL, title = paste(aSample, " vs ", aControl, " Down genes\tGO term", sep = ""), showCategory = 30))
}
}
if (!is.null(opt$KEGG) && !is.null(Species) && opt$KEGG) {
cat("process KEGG enrich:\t", aSample)
###############Diff gene KEGG#####################
if (length(na.omit(entrez_id[gene_index])) > 0) {
kegg_term <- enrichKEGG(gene = (na.omit(entrez_id[up_gene_index])), organism = Species, qvalueCutoff = 0.05, universe = (na.omit(entrez_id)))
if (!is.null(kegg_term) && dim(kegg_term)[1] > 0) {
print(dotplot(kegg_term, title = paste(aSample, " vs ", aControl, " Diff genes\tKEGG term", sep = ""), showCategory = 30))
}
}
###############Up gene KEGG######################
if (length(na.omit(entrez_id[up_gene_index])) > 0) {
kegg_term <- enrichKEGG(gene = (na.omit(entrez_id[up_gene_index])), organism = Species, qvalueCutoff = 0.05, universe = (na.omit(entrez_id)))
if (!is.null(kegg_term) && dim(kegg_term)[1] > 0) {
print(dotplot(kegg_term, title = paste(aSample, " vs ", aControl, " Up genes\tKEGG term", sep = ""), showCategory = 30))
}
}
###############Down gene KEGG####################
if (length(na.omit(entrez_id[down_gene_index])) > 0) {
kegg_term <- enrichKEGG(gene = (na.omit(entrez_id[down_gene_index])), organism = Species, qvalueCutoff = 0.05, universe = (na.omit(entrez_id)))
if (!is.null(kegg_term) && dim(kegg_term)[1] > 0) {
print(dotplot(kegg_term, title = paste(aSample, " vs ", aControl, " Down genes\tKEGG term", sep = ""), showCategory = 30))
}
}
}
cat("\n")
} else {
warning("Can not find different expression gene")
}
foldChangeList[[paste(aSample, aControl, sep = "-")]] <- res$log2FoldChange
}
test<-warnings()
#--------------------------------------------------------------------------------------
Changed_gene <- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "gene", all = TRUE), Changed_gene_list)
Changed_gene[is.na(Changed_gene)] <- 0
res_xlsx_list[["ChangedGene"]] <- Changed_gene
res_xlsx_list[["FoldChangeList"]] <- foldChangeList
write.xlsx(res_xlsx_list, file = paste(OutDir, "/", OutPrefix, ".res.xlsx", sep = ""))
if (opt$GO) {
write.xlsx(go_term_list, file = paste(OutDir, "/", OutPrefix, ".go.xlsx", sep = ""))
}
dev.off()
